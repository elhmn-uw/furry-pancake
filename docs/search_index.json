[
["intro-class.html", "CFRM 420 Lecture Notes Lecture 1 Intro Class 1.1 Getting Acquainted with R and RStudio 1.2 Asset Return 1.3 Adjusted Price", " CFRM 420 Lecture Notes Nam Lee 2020-07-10 Lecture 1 Intro Class Chapters 1, 2, and 4: Obtaining financial data; principles of financial data science; exploratory (or empirical) data analysis, calculating asset returns 1.1 Getting Acquainted with R and RStudio R is a programming language for statistical computing and graphics. It is widely used among statisticians and contains a large number of ready-to-use functions (called packages). Start by installing R. Please visit: https://www.r-project.org/. For Jupyter Notebook style, visit: colab.fan/r This will install the R software. It is also recommended to install an IDE (integrated development environment) for R, such as RStudio. Please visit: https://www.rstudio.com/products/rstudio/download/. 1.1.1 Install “Quantmod” There are many online resources to learn R. I will briefly explain the codes presented in each class. However, you should thoroughly examine each code on your own, and use the R documentation to learn how the are used. Let us open RStudio, and install our first package. As mentioned before, packages include ready-to-use functions. quantmod is a package that can be used for obtaining financial data. To install the package use Tools -&gt; Install Packages… menu in RStudio, or directly use the following command: install.packages(&quot;quantmod&quot;) 1.1.2 Obtaining financial data However, to be able to use an installed package, we need to load it. This is done by the following command. library(&#39;quantmod&#39;) ## Loading required package: xts ## Loading required package: zoo ## ## Attaching package: &#39;zoo&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## as.Date, as.Date.numeric ## Registered S3 method overwritten by &#39;xts&#39;: ## method from ## as.zoo.xts zoo ## Loading required package: TTR ## Registered S3 method overwritten by &#39;quantmod&#39;: ## method from ## as.zoo.data.frame zoo ## Version 0.4-0 included new data defaults. See ?getSymbols. As you can see, R automatically load other packages that quantmod relies on, namely, packages xtx and zoo (both are packages that define time-series data types). quantmod provides the function getSymbols() which can be used to find historical financial and economical data from various online resources. Let us load historical data from Apple Inc. from Yahoo! finance. First, we need to find the symbol for apple. Searching the web, we find the symbol at https://finance.yahoo.com/quote/AAPL/ Thus, the symbol is AAPL. Now, we can use the following R command to obtain the data. getSymbols(&quot;AAPL&quot;, from=&quot;2007-01-01&quot;, to=&quot;2018-05-30&quot;, src=&quot;yahoo&quot;) ## &#39;getSymbols&#39; currently uses auto.assign=TRUE by default, but will ## use auto.assign=FALSE in 0.5-0. You will still be able to use ## &#39;loadSymbols&#39; to automatically load data. getOption(&quot;getSymbols.env&quot;) ## and getOption(&quot;getSymbols.auto.assign&quot;) will still be checked for ## alternate defaults. ## ## This message is shown once per session and may be disabled by setting ## options(&quot;getSymbols.warning4.0&quot;=FALSE). See ?getSymbols for details. ## [1] &quot;AAPL&quot; We have obtained the historical data of symbol AAPL, from January 2007 until May 2018, using the data source yahoo (Yahoo! finance), and store it as a variable called AAPL. class(AAPL) ## [1] &quot;xts&quot; &quot;zoo&quot; The variable is an extended time series (xts) object, which is a subclass of type zoo. These are essentially 2 dimensional arrays, where the index rows are date/time objects. To get the total number of rows and columns, we can use: dim(AAPL) ## [1] 2871 6 So, AAPL has 2871 rows (trading days) and 6 columns. names(AAPL) ## [1] &quot;AAPL.Open&quot; &quot;AAPL.High&quot; &quot;AAPL.Low&quot; &quot;AAPL.Close&quot; ## [5] &quot;AAPL.Volume&quot; &quot;AAPL.Adjusted&quot; open price (the first trade of the day), high price (the highest price of the day), low price (the lowest price of the day), close price (the last trade of the day), volume (the total number of shares traded during the day), the adjusted prices (the price that is adjusted to include the effect of corporate events such as dividend payments and stock splits, more on this later) 1.1.3 Subset by Position To get the first few rows of the xts object, we can use the function head(), and to get the last few rows, we can use the function tails(). head(AAPL,n=5) ## AAPL.Open AAPL.High AAPL.Low AAPL.Close AAPL.Volume AAPL.Adjusted ## 2007-01-03 12.32714 12.36857 11.70000 11.97143 309579900 10.36364 ## 2007-01-04 12.00714 12.27857 11.97429 12.23714 211815100 10.59366 ## 2007-01-05 12.25286 12.31428 12.05714 12.15000 208685400 10.51822 ## 2007-01-08 12.28000 12.36143 12.18286 12.21000 199276700 10.57016 ## 2007-01-09 12.35000 13.28286 12.16429 13.22429 837324600 11.44823 tail(AAPL,n=5) ## AAPL.Open AAPL.High AAPL.Low AAPL.Close AAPL.Volume AAPL.Adjusted ## 2018-05-22 188.38 188.88 186.78 187.16 15240700 182.1795 ## 2018-05-23 186.35 188.50 185.76 188.36 20058400 183.3476 ## 2018-05-24 188.77 188.84 186.21 188.15 23234000 183.1432 ## 2018-05-25 188.23 189.65 187.65 188.58 17461000 183.5618 ## 2018-05-29 187.60 188.75 186.87 187.90 22514100 182.8999 1.1.4 Subset by Date Range AAPL[&quot;2015-12-23/2015-12-24&quot;] ## AAPL.Open AAPL.High AAPL.Low AAPL.Close AAPL.Volume AAPL.Adjusted ## 2015-12-23 107.27 108.85 107.20 108.61 32657400 100.9794 ## 2015-12-24 109.00 109.00 107.95 108.03 13570400 100.4401 AAPL[&#39;2015-12&#39;] ## AAPL.Open AAPL.High AAPL.Low AAPL.Close AAPL.Volume AAPL.Adjusted ## 2015-12-01 118.75 118.81 116.86 117.34 34852400 109.09604 ## 2015-12-02 117.34 118.11 116.08 116.28 33386600 108.11053 ## 2015-12-03 116.55 116.79 114.22 115.20 41569500 107.10641 ## 2015-12-04 115.29 119.25 115.11 119.03 57777000 110.66733 ## 2015-12-07 118.98 119.86 117.81 118.28 32084200 109.97002 ## 2015-12-08 117.52 118.60 116.86 118.23 34309500 109.92352 ## 2015-12-09 117.64 117.69 115.08 115.62 46361400 107.49690 ## 2015-12-10 116.04 116.94 115.51 116.17 29212700 108.00826 ## 2015-12-11 115.19 115.39 112.85 113.18 46886200 105.22832 ## 2015-12-14 112.18 112.68 109.79 112.48 64318700 104.57750 ## 2015-12-15 111.94 112.80 110.35 110.49 53323100 102.72733 ## 2015-12-16 111.07 111.99 108.80 111.34 56238500 103.51762 ## 2015-12-17 112.02 112.25 108.98 108.98 44772800 101.32341 ## 2015-12-18 108.91 109.52 105.81 106.03 96453300 98.58065 ## 2015-12-21 107.28 107.37 105.57 107.33 47590600 99.78932 ## 2015-12-22 107.40 107.72 106.45 107.23 32789400 99.69637 ## 2015-12-23 107.27 108.85 107.20 108.61 32657400 100.97939 ## 2015-12-24 109.00 109.00 107.95 108.03 13570400 100.44014 ## 2015-12-28 107.59 107.69 106.18 106.82 26704200 99.31517 ## 2015-12-29 106.96 109.43 106.86 108.74 30931200 101.10027 ## 2015-12-30 108.58 108.70 107.18 107.32 25213800 99.78002 ## 2015-12-31 107.01 107.03 104.82 105.26 40912300 97.86475 1.1.5 Visualize Data as Timeseries chartSeries(AAPL, theme=&quot;white&quot;, echo=TRUE) chartSeries(AAPL, theme=&quot;white&quot;, subset=&quot;2015-12-15::2015-12-31&quot;) 1.1.6 Understanding chartSeries What does chartSeries do? ?chartSeries What is OHLC charts? Figure 1.1: OHLC 1.1.7 Obtain Unemployment Data We can use other sources to obtain data. For example, let us obtain monthly unemployment rate from Federal Reserve Economic Data (FRED). We may find the symbol for unemployment rate in the following page https://fred.stlouisfed.org/series/UNRATE, which reveals that the symbol is UNRATE. getSymbols(&quot;UNRATE&quot;,src=&quot;FRED&quot;) ## [1] &quot;UNRATE&quot; 1.1.8 Visualize Unemployment Data dim(UNRATE) ## [1] 870 1 head(UNRATE) ## UNRATE ## 1948-01-01 3.4 ## 1948-02-01 3.8 ## 1948-03-01 4.0 ## 1948-04-01 3.9 ## 1948-05-01 3.5 ## 1948-06-01 3.6 tail(UNRATE) ## UNRATE ## 2020-01-01 3.6 ## 2020-02-01 3.5 ## 2020-03-01 4.4 ## 2020-04-01 14.7 ## 2020-05-01 13.3 ## 2020-06-01 11.1 chartSeries(UNRATE, theme=&quot;white&quot;) 1.2 Asset Return 1.2.1 Single Period Return Let \\(P_0, P_1, \\ldots\\) be the price of an equity. For now, let’s assume no “corporate actions” such as dividends, split, etc. Net return over \\([t-1,t]\\): \\[ R_t:= (P_t-P_{t-1})/P_{t-1}. \\] Gross return over \\([t-1,t]\\) is \\[ P_t/P_{t-1} = 1+R_t \\] Log returns over \\([t-1,t]\\): \\[ r_t := \\log({P_t}/{P_{t-1}}) \\] 1.2.2 Multi Period Returns \\(R_t(k)\\), the net return over \\([t-k,t]\\), is given by: \\[ \\begin{aligned} R_t(k) &amp; := \\frac{P_t}{P_{t-k}} - 1 \\\\ &amp; = (1+R_t)(1+R_{t-1})\\cdots(1+R_{t-k+1}) -1, \\end{aligned} \\] \\(r_t(k)\\), the log return over \\([t-k,t]\\), is given by: \\[ \\begin{aligned} r_t(k) &amp; := \\log\\frac{P_t}{P_{t-k}} \\\\ &amp; = r_t + r_{t-1} + \\cdots + r_{t-k+1} \\end{aligned} \\] 1.2.3 Simple Example The following table gives two daily (adjusted) closing price of Apple stock in Dec. 2015 Date 12/23 12/24 Price($) 104.56 104.00 Gross (daily) return on 12/24 is \\[104/104.56=0.994644\\] Net return on 12/24 is \\[0.994644-1=−0.005356\\] Log return on 12/24 is \\[\\log(104.00)−\\log(104.56)=−0.005370\\] 1.2.4 Approximation Example For small \\(|x|\\) , we have \\[ x\\approx \\log(1+x), \\] whence log and net returns are good approximation of each other Suppose that we use log returns instead of net returns. How are our estimations? for losses and for gains? x=seq(-1,1,by=0.01) y = log(1+x) plot(x,y,type=&#39;l&#39;) abline(a=0,b=1,col=&#39;red&#39;) 1.3 Adjusted Price There are many market events that makes our return formula inappropriate for quoted prices, e.g. dividend payments, stock splits, etc. 1.3.1 Net Return with Dividend Let \\(D_1\\), \\(D_2\\), … be the dividends of a stock with quoted prices \\(P_1, P_2,\\ldots\\), where \\(D_t\\) is the dividend paid at \\(t\\). The appropriate definition of the net return should be \\[ R_t = \\frac{P_t + D_t - P_{t-1}}{P_{t-1}}. \\] Similarly, the multi-period net return \\(R_t(k)\\) should be \\[ \\begin{aligned} &amp;\\quad 1+ R_t(k) \\\\ &amp; = (1+R_t)(1+R_{t-1}) \\dots (1+R_{t-k+1})\\\\ &amp;= \\left(\\frac{P_t+D_t}{P_{t-1}}\\right)\\left(\\frac{P_{t-1}+D_{t-1}}{P_{t-2}}\\right)\\cdots\\left(\\frac{P_{t-k+1}+D_{t-k+1}}{P_{t-k}}\\right) \\\\ &amp;\\ne \\frac{P_t}{P_{t-k}} \\end{aligned} \\] 1.3.2 The idea behind “adjusted prices” Find prices \\(\\widetilde P_{t_1}\\), \\(\\widetilde P_{t_2}\\), …, such that return are given by “simple” formulas applied to \\(\\widetilde P_t\\). In other words, we want \\[ \\begin{aligned} &amp;\\quad 1+R_t = \\frac{\\widetilde{P}_t}{\\widetilde{P}_{t-1}}\\\\ &amp; \\Longrightarrow\\frac{P_t + D_t}{P_{t-1}} = \\frac{\\widetilde {P}_t}{\\widetilde {P}_{t-1}}\\\\ &amp; \\Longrightarrow\\widetilde P_t = \\left(\\frac{P_t+D_t}{P_{t-1}}\\right) \\widetilde P_{t-1} \\end{aligned} \\] There are many such adjustment for different types of events. Always use “adjust prices” to calculate returns. 1.3.3 Using Adjusted AAPL Prices Next, we show two ways to calculate asset returns using R. Let us first obtain the prices of Apple Inc. getSymbols(&quot;AAPL&quot;, from=&quot;2017-10-03&quot;, to=&quot;2017-10-13&quot;, src=&quot;yahoo&quot;) ## [1] &quot;AAPL&quot; names(AAPL) ## [1] &quot;AAPL.Open&quot; &quot;AAPL.High&quot; &quot;AAPL.Low&quot; &quot;AAPL.Close&quot; ## [5] &quot;AAPL.Volume&quot; &quot;AAPL.Adjusted&quot; 1.3.4 Adjusted Prices As mentioned before, the adjusted price is the column AAPL.Adjusted. We can obtain the column by using the $ operator: AAPL$AAPL.Adjusted ## AAPL.Adjusted ## 2017-10-03 148.6490 ## 2017-10-04 147.6867 ## 2017-10-05 149.5246 ## 2017-10-06 149.4380 ## 2017-10-09 149.9576 ## 2017-10-10 150.0153 ## 2017-10-11 150.6408 ## 2017-10-12 150.1116 1.3.5 Log and Net Return of AAPL One can use the lag() and diff() functions (take a look at the R documentation to learn what they do). P &lt;- AAPL$AAPL.Adjusted R &lt;- diff(P)/lag(P) class(R) ## [1] &quot;xts&quot; &quot;zoo&quot; r &lt;- diff(log(P)) class(r) ## [1] &quot;xts&quot; &quot;zoo&quot; head(r) ## AAPL.Adjusted ## 2017-10-03 NA ## 2017-10-04 -0.0064943407 ## 2017-10-05 0.0123677222 ## 2017-10-06 -0.0005793969 ## 2017-10-09 0.0034711500 ## 2017-10-10 0.0003848614 head(R) ## AAPL.Adjusted ## 2017-10-03 NA ## 2017-10-04 -0.0064732981 ## 2017-10-05 0.0124445188 ## 2017-10-06 -0.0005792291 ## 2017-10-09 0.0034771815 ## 2017-10-10 0.0003849354 Let us calculate the net and log returns for a longer period and plot the result. getSymbols(&quot;AAPL&quot;, from=&quot;2007-01-03&quot;, to=&quot;2017-10-13&quot;, src=&quot;yahoo&quot;) ## [1] &quot;AAPL&quot; AAPL.rtn = diff(AAPL$AAPL.Adjusted)/lag(AAPL$AAPL.Adjusted) # Compute net returns colnames(AAPL.rtn)[1] = &quot;net&quot; AAPL.rtn$log = diff(log(AAPL$AAPL.Adjusted)) # Compute log returns head(AAPL.rtn) ## net log ## 2007-01-03 NA NA ## 2007-01-04 0.022195488 0.021952753 ## 2007-01-05 -0.007121143 -0.007146620 ## 2007-01-08 0.004938096 0.004925943 ## 2007-01-09 0.083070321 0.079799898 ## 2007-01-10 0.047855424 0.046745622 chartSeries(AAPL.rtn$net, name = &quot;Net-returns of Apple Inc.&quot;, theme=chartTheme(&quot;white&quot;, up.col=&#39;black&#39;)) chartSeries(AAPL.rtn$log, name = &quot;log-returns of Apple Inc.&quot;, theme=chartTheme(&quot;white&quot;, up.col=&#39;black&#39;)) "]
]
